using System.Collections.Generic;
using System.IO;
using Common.EasyMarkup;
using SMLHelper.V2.Utility;

namespace SlotExtender
{
    //Original code found on PrimeSonic's MoreCyclopsUpgrades MOD
    public class SlotExtenderSaveData : EmPropertyCollection
    {
        private readonly string ID;

        private readonly EmModuleSaveData SeamothModule1;
        private readonly EmModuleSaveData SeamothModule2;
        private readonly EmModuleSaveData SeamothModule3;
        private readonly EmModuleSaveData SeamothModule4;
        

        private static ICollection<EmProperty> SlotExtenderDefs => new List<EmProperty>(4)
        {
            new EmModuleSaveData("M1"),
            new EmModuleSaveData("M2"),
            new EmModuleSaveData("M3"),
            new EmModuleSaveData("M4")            
        };

        public EmModuleSaveData GetModuleInSlot(string slot)
        {
            switch (slot)
            {
                case "SeamothModule1": return SeamothModule1;
                case "SeamothModule2": return SeamothModule2;
                case "SeamothModule3": return SeamothModule3;
                case "SeamothModule4": return SeamothModule4;
                
                default: return null;
            }
        }

        public SlotExtenderSaveData(string preFabID) : base("SlotExtenderSaveData", SlotExtenderDefs)
        {
            ID = preFabID;

            SeamothModule1 = (EmModuleSaveData)Properties["M1"];
            SeamothModule2 = (EmModuleSaveData)Properties["M2"];
            SeamothModule3 = (EmModuleSaveData)Properties["M3"];
            SeamothModule4 = (EmModuleSaveData)Properties["M4"];
            
        }

        private string SaveDirectory => Path.Combine(SaveUtils.GetCurrentSaveDataDir(), "SlotExtender");
        private string SaveFile => Path.Combine(SaveDirectory, ID + ".txt");

        public void Save()
        {
            if (!Directory.Exists(SaveDirectory))
            {
                Directory.CreateDirectory(SaveDirectory);
            }

            File.WriteAllLines(SaveFile, new[]
            {
                "# This save data was generated by EasyMarkup #",
                ToString(),
            });
        }

        public bool Load()
        {
            string saveDir = SaveFile;
            if (!File.Exists(saveDir))
            {
                Save();
                return false;
            }

            string serializedData = File.ReadAllText(saveDir);

            bool validData = FromString(serializedData);

            if (!validData)
            {
                Save();
                return false;
            }

            return true;
        }

        internal override EmProperty Copy() => new SlotExtenderSaveData(ID);


    }
}
